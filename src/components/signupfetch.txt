import React, { useState } from "react";
import "./SignUp.css";

function SignUp() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isLogin, setIsLogin] = useState(false); // State to toggle between signup and login

  const handleSubmit = (event) => {
    event.preventDefault();

    // Check if passwords match if user is signing up
    if (!isLogin && password !== confirmPassword) {
      setError("Passwords do not match");
      return;
    }

    setIsLoading(true);
    let url;
    if (isLogin) {
      url = `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyDxRZQnGCbIbLdX0T-hMudwZE9GiRmWIIw`;
    } else {
      url = `https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyDxRZQnGCbIbLdX0T-hMudwZE9GiRmWIIw`;
    }
    fetch(url, {
      method: "POST",
      body: JSON.stringify({
        email: email,
        password: password,
        returnSecureToken: true,
      }),
      headers: {
        "Content-Type": "application/json",
      },
    })
      .then((response) => {
        setIsLoading(false);
        if (response.ok) {
          return response.json();
        } else {
          return response.json().then((data) => {
            let errorMessage = "Authentication failed: Invalid credentials";
            // if (data && data.error && data.error.message) {
            //   errorMessage = data.error.message;
            // }
            throw new Error(errorMessage);
          });
        }
      })
      .then((data) => {
        
        console.log("Authentication successful:", data);
        setError(null);
        
        setEmail("");
        setPassword("");
        setConfirmPassword("");
      })
      .catch((err) => {
        setError(err.message);
      });
  };

  // Function to toggle between signup and login views
  const toggleLogin = () => {
    setIsLogin((prevIsLogin) => !prevIsLogin);
    setError(null); // Clear any previous error messages
  };

  return (
    <section className="signup-container">
      <form className="signup-form" onSubmit={handleSubmit}>
        <h2>{isLogin ? "Login" : "Sign Up"}</h2>
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
        {!isLogin && (
          <input
            type="password"
            placeholder="Confirm Password"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            required
          />
        )}
        {error && <p className="error-message">{error}</p>}
        <button type="submit" disabled={isLoading}>
          {isLoading ? "Processing..." : isLogin ? "Log in" : "Sign up"}
        </button>
        <div className="login-link">
          {isLogin ? "Don't have an account ?" : "Already have an account ?"}
          {isLogin ? (
            <button type="button"  onClick={toggleLogin}>
              Create a new account
            </button>
          ) : (
            <button type="button" className="small-button" onClick={toggleLogin}>
              Log in with existing account
            </button>
          )}
        </div>
      </form>
    </section>
  );

}

export default SignUp;



